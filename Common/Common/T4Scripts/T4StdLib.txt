<#@ assembly name="System.Core" #>
<#@ assembly name="Microsoft.VisualStudio.TextTemplating.Interfaces.10.0" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE100" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE100" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #><#+
    
public void Header()
{

#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
<#+

}

public void BeginBracket()
{

#>
{
<#+

    PushIndent("    ");
}

public void EndBracket()
{
    PopIndent();
#>
}
<#+

}

public void BeginRegion(string name)
{
#>
#region <#=name#>
<#+
}

public void EndRegion(string name)
{
#>
#endregion // <#=name#>
<#+
}

public void NewLine()
{
    WriteLine("");
}

public string MakeCamelCase(string str)
{
    string[] strArray = str.Split(' ');
    StringBuilder Buffer = new StringBuilder();
    foreach (string s in strArray)
    {
        Buffer.Append(s.First().ToString().ToUpper() + s.Substring(1));
    }
    return Buffer.ToString();
}

public string[] SplitPathString(string str)
{
    return str.Split('\\', '/', '+');
}

public class DTEVSHelper
{
    public IEnumerable<Project> GetProjects(Solution solution)
    {
        foreach (Project project in solution.Projects)
        {
            string DebugName = project.Name;
            yield return project;
        }
    }

    public Project GetProject(Solution solution, string name)
    {
        return GetProjects(solution).FirstOrDefault(x => x.Name == name);
    }

    public ProjectItem GetProjectItem(Project p, string[] list)
    {
        if (list.Length == 0)
            return null;

        if (list.Length == 1)
        {
            return p.ProjectItems.Cast<ProjectItem>().FirstOrDefault(x => x.Name == list[0]);
        }
        else
        {
            ProjectItem folder = p.ProjectItems.Cast<ProjectItem>().FirstOrDefault(x => x.Name == list[0]);
            string[] subList = list.Where(x => x != list[0]).ToArray();
            return GetProjectItem(folder, subList);
        }
    }

    public ProjectItem GetProjectItem(ProjectItem p, string[] list)
    {
        if (list.Length == 0)
            return null;

        if (list.Length == 1)
        {
            return p.ProjectItems.Cast<ProjectItem>().FirstOrDefault(x => x.Name == list[0]);
        }
        else
        {
            ProjectItem folder = p.ProjectItems.Cast<ProjectItem>().FirstOrDefault(x => x.Name == list[0]);
            string[] subList = list.Where(x => x != list[0]).ToArray();
            return GetProjectItem(folder, subList);
        }
    }

    public IEnumerable<ProjectItem> GetAllProjectItems(IEnumerable<ProjectItem> projectItems)
    {
        foreach (ProjectItem projectItem in projectItems)
        {
            string DebugName = projectItem.Name;
            yield return projectItem;
            if (projectItem.ProjectItems != null)
            {
                foreach (ProjectItem prjItm in GetAllProjectItems(projectItem.ProjectItems.Cast<ProjectItem>()))
                {
                    string DebugName2 = prjItm.Name;
                    yield return prjItm;
                }
            }
        }
    }

    public IEnumerable<T> GetCodeElements<T>(IEnumerable<CodeElement> codeElements, Nullable<vsCMElement> cmType = null) where T : class
    {
        foreach (CodeElement codeElement in codeElements)
        {
            string DebugName = codeElement.Kind.ToString();
            if (!cmType.HasValue)
                yield return codeElement as T;
            else
                if (codeElement.Kind == cmType)
                    yield return codeElement as T;
        }
    }

    public IEnumerable<T> GetAllCodeElements<T>(IEnumerable<CodeElement> codeElements, Nullable<vsCMElement> cmType = null) where T : class
    {
        foreach (CodeElement codeElement in codeElements)
        {
            string DebugName = codeElement.Kind.ToString();
            if (!cmType.HasValue)
                yield return codeElement as T;
            else
                if (codeElement.Kind == cmType)
                    yield return codeElement as T;

            if (codeElement.Children != null)
            {
                foreach (CodeElement cdelment in GetAllCodeElements<T>(codeElement.Children.Cast<CodeElement>(), cmType))
                {
                    yield return cdelment as T;
                }
            }
        }
    }

    public IEnumerable<T> GetAllCodeElementsinProject<T>(Project project, Nullable<vsCMElement> cmType = null) where T : class
    {
        foreach (ProjectItem projectItem in GetAllProjectItems(project.ProjectItems.Cast<ProjectItem>()))
        {
            if (projectItem.FileCodeModel != null)
            {
                foreach (CodeElement codeElement in GetAllCodeElements<T>(projectItem.FileCodeModel.CodeElements.Cast<CodeElement>(), cmType))
                {
                    yield return codeElement as T;
                }
            }
        }
    }
}

public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}

#>